<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension="cs"#>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

<#
	string[] _windowProperty = 
	{
		"Center",
		"LeftUp",
		"LeftDown",
		"RightUp",
		"RightDown"
	};
#>

<#
	string[] _command =
	{
		"NewProject",
		"OpenProject",
		"SaveProject",
		"SaveAsProject",
		"LoadAsset",
		"CreateObject",
		"Controller",
		"WindowClose",
		"SizeChanged",
		"TogglePostProcess",
		"Voxelize",
		"Octree",
	};

#>
namespace RenderApp.ViewModel
{
	public partial class MainWindowViewModel
	{
<#
		for(int i =0 ; i < _command.Length; i++)
		{
#>
			private ICommand _<#=_command[i]#>;
			public ICommand <#=_command[i]#>
			{
				get
				{
					if(_<#=_command[i]#> == null)
					{
						return _<#=_command[i]#> = CreateCommand(<#=_command[i]#>Command);						
					}
					return _<#=_command[i]#>;
				}
			}
<#
		}

#>

<#
		for(int i =0 ; i < _windowProperty.Length; i++)
		{
#>
			private ObservableCollection<DockWindowViewModel> _<#=_windowProperty[i]#>ItemsSource = new ObservableCollection<DockWindowViewModel>();
			public ObservableCollection<DockWindowViewModel> <#=_windowProperty[i]#>ItemsSource
			{
				get
				{
					return _<#=_windowProperty[i]#>ItemsSource;
				}
			}
<#
		}

#>

<#
		for(int i =0 ; i < _windowProperty.Length; i++)
		{
#>
			private DockWindowViewModel _<#=_windowProperty[i]#>SelectItem;
			public DockWindowViewModel <#=_windowProperty[i]#>SelectItem
			{
				get
				{
					return _<#=_windowProperty[i]#>SelectItem;
				}
				set
				{
					SetValue(ref _<#=_windowProperty[i]#>SelectItem,value);
				}
			}
<#
		}

#>



	}

}