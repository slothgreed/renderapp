<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#
 var classProperty = new Tuple<string,string[],string[]>[]
 {
	Tuple.Create(
	"Selection",
	new string[]{"int"},
	new string[]{"uID"}),
	
	Tuple.Create(
	"Bloom",
	new string[]{"float"	,"float[]"	,"Texture"	,"bool"},
	new string[]{"uScale"	,"uWeight"	,"uTarget"	,"uHorizon"}),
	
	Tuple.Create(
	"Sobel",
	new string[]{"Texture"	,"int"		,"int"		,"float"},
	new string[]{"uTarget"	,"uWidth"	,"uHeight"	,"uThreshold"}),

	Tuple.Create(
	"SSAO",
	new string[]{"Texture"	,"Texture"	,"float[]"},
	new string[]{"uPosition","uTarget"	,"uSample"}),

	Tuple.Create(
	"SSLIC",
	new string[]{"Texture"	,"Texture"	,"Texture"	,"Texture"	,"Texture"},
	new string[]{"uPosit"	,"uNormal"	,"uVector"	,"uNoize"	,"uTexCoord"}),

	Tuple.Create(
	"OutputBuffer",
	new string[]{"Texture"	,"Texture"},
	new string[]{"uSelectMap","uTarget"})


 };
#>
using System;
using KI.Gfx.KITexture;
namespace KI.Renderer
{
<#
	for(int classIndex = 0; classIndex < classProperty.Length; classIndex++){
#>
	public partial class <#=classProperty[classIndex].Item1#> : OffScreenTechnique
	{
<#
	for(int propetyIndex = 0; propetyIndex < classProperty[classIndex].Item2.Length; propetyIndex++){
#>
		private <#=classProperty[classIndex].Item2[propetyIndex]#> _<#=classProperty[classIndex].Item3[propetyIndex]#>;
		public <#=classProperty[classIndex].Item2[propetyIndex]#> <#=classProperty[classIndex].Item3[propetyIndex]#>
		{
			get
			{
				return _<#=classProperty[classIndex].Item3[propetyIndex]#>;
			}

			set
			{
				SetValue<<#=classProperty[classIndex].Item2[propetyIndex]#>>(ref _<#=classProperty[classIndex].Item3[propetyIndex]#>, value); 
			}
		}
<#
	}
#>
	}
<#
	}
#>
}