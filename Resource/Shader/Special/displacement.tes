#version 400
layout(quads, equal_spacing, ccw) in;

in vec3 tc_position[];
in vec3 tc_normal[];
in vec2 tc_texcoord[];

out vec3 te_position;
out vec3 te_normal;
out vec2 te_texcoord;
out vec3 tePatchDistance;
out vec3 tCameraDir;
out vec3 tLightDir;

uniform sampler2D uHeightMap;
uniform mat4 uModelMatrix;
uniform vec3 uLightPosition;
uniform vec3 uCameraPosition;
uniform mat4 uMVP;
void main()
{
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;
    vec3 p0 = tc_position[0];
    vec3 p1 = tc_position[1];
    vec3 p2 = tc_position[2];
	vec3 p3 = tc_position[3];
	tePatchDistance = gl_TessCoord;
	
	vec3 len = p2 - p0;
	float height = texture(uHeightMap,gl_TessCoord.xy).x;
	te_position = vec3((u * len.x) + p0.x,height,(v * len.z) + p0.z);
	te_normal = tc_normal[0];
	te_texcoord = gl_TessCoord.xy;


	vec3 pos = (uModelMatrix * vec4(te_position,1.0)).xyz;
	vec3 cameraDir = normalize(uCameraPosition - pos);
	vec3 lightDir = normalize(uLightPosition - pos);

	vec3 tnormal = normalize(te_normal);
	vec3 ttangent = normalize(cross(tnormal,vec3(0,0,1)));
	vec3 tbinormal = normalize(-cross(tnormal,ttangent));

	tCameraDir.x = dot(ttangent,cameraDir);
	tCameraDir.y = dot(tbinormal,cameraDir);
	tCameraDir.z = dot(tnormal,cameraDir);
	normalize(tCameraDir);
	
	
	tLightDir.x =  dot(ttangent,lightDir);
	tLightDir.y =  dot(tbinormal,lightDir);
	tLightDir.z =  dot(tnormal,lightDir);
	normalize(tLightDir);

	gl_Position = uMVP * vec4(te_position,1);
	
}
